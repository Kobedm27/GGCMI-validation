---
title: "Spatial distribution of model ensemble performance under extremes"
format: 
  html: 
    toc: true
    code-fold: true
    code-summary: "Show the code"
    embed-resources: true
    self-contained-math: true

editor: visual
---

::: {.callout-note title="Overview" icon="false"}
This notebook will guide you through the code to plot a world map of model ensemble median performance (median error) under climatic extremes in R. The following figures will be computed:

-   Figure 2: spatial distribution for aggregated crops

-   Supplementary figures 6-9: spatial distribution for each crop (mai, soy, wwh, ri1)

The fully processed and filtered data files, available under GGCMI-validation/data/processed/figure_ready_data are required to produce the figures.
:::

We load the necessary libraries

```{r, warning = FALSE, message = FALSE}
library(tidyverse)   # Includes dplyr, ggplot2, readr, etc.
library(sjPlot)  # to set and configure plotting theme
library(rnaturalearth) # to create base world map with countries
```

We configure the plotting theme based on the data visualization blog from Cédric Scherer: <https://www.cedricscherer.com/>

```{r, warning = FALSE, message = FALSE}
theme_Scherer <- function (base_size = 12, base_family = "Helvetica") {
  half_line <- base_size/2
  theme(
    line = element_line(color = "black", linewidth = .5,
                        linetype = 1, lineend = "butt"),
    rect = element_rect(fill = "white", color = "black",
                        linewidth = .5, linetype = 1),
    text = element_text(family = base_family, face = "plain",
                        color = "black", size = base_size,
                        lineheight = .9, hjust = .5, vjust = .5,
                        angle = 0, margin = margin(), debug = FALSE),
    axis.line = element_blank(),
    axis.line.x = NULL,
    axis.line.y = NULL,
    axis.text = element_text(size = base_size * 1.1, color = "gray30"),
    axis.text.x = element_text(margin = margin(t = .8 * half_line/2),
                               vjust = 1),
    axis.text.x.top = element_text(margin = margin(b = .8 * half_line/2),
                                   vjust = 0),
    axis.text.y = element_text(margin = margin(r = .8 * half_line/2),
                               hjust = 1),
    axis.text.y.right = element_text(margin = margin(l = .8 * half_line/2),
                                     hjust = 0),
    axis.ticks = element_line(color = "gray30", linewidth = .7),
    axis.ticks.length = unit(half_line / 1.5, "pt"),
    axis.ticks.length.x = NULL,
    axis.ticks.length.x.top = NULL,
    axis.ticks.length.x.bottom = NULL,
    axis.ticks.length.y = NULL,
    axis.ticks.length.y.left = NULL,
    axis.ticks.length.y.right = NULL,
    axis.title.x = element_text(margin = margin(t = half_line),
                                vjust = 1, size = base_size * 1.3,
                                face = "bold"),
    axis.title.x.top = element_text(margin = margin(b = half_line),
                                    vjust = 0),
    axis.title.y = element_text(angle = 90, vjust = 1,
                                margin = margin(r = half_line),
                                size = base_size * 1.3, face = "bold"),
    axis.title.y.right = element_text(angle = -90, vjust = 0,
                                      margin = margin(l = half_line)),
    legend.background = element_rect(color = NA),
    legend.spacing = unit(.4, "cm"),
    legend.spacing.x = NULL,
    legend.spacing.y = NULL,
    legend.margin = margin(.2, .2, .2, .2, "cm"),
    legend.key = element_rect(fill = "gray95", color = "white"),
    legend.key.size = unit(1.2, "lines"),
    legend.key.height = NULL,
    legend.key.width = NULL,
    legend.text = element_text(size = rel(.8)),
    legend.text.align = NULL,
    legend.title = element_text(hjust = 0),
    legend.title.align = NULL,
    legend.position = "right",
    legend.direction = NULL,
    legend.justification = "center",
    legend.box = NULL,
    legend.box.margin = margin(0, 0, 0, 0, "cm"),
    legend.box.background = element_blank(),
    legend.box.spacing = unit(.4, "cm"),
    panel.background = element_rect(fill = "white", color = NA),
    panel.border = element_rect(color = "gray30",
                                fill = NA, linewidth = .7),
    panel.grid.major = element_line(color = "gray90", linewidth = 1),
    panel.grid.minor = element_line(color = "gray90", linewidth = .5,
                                    linetype = "dashed"),
    panel.spacing = unit(base_size, "pt"),
    panel.spacing.x = NULL,
    panel.spacing.y = NULL,
    panel.ontop = FALSE,
    strip.background = element_rect(fill = "white", color = "gray30"),
    strip.text = element_text(color = "black", size = base_size),
    strip.text.x = element_text(margin = margin(t = half_line,
                                                b = half_line)),
    strip.text.y = element_text(angle = -90,
                                margin = margin(l = half_line,
                                                r = half_line)),
    strip.text.y.left = element_text(angle = 90),
    strip.placement = "inside",
    strip.placement.x = NULL,
    strip.placement.y = NULL,
    strip.switch.pad.grid = unit(0.1, "cm"),
    strip.switch.pad.wrap = unit(0.1, "cm"),
    plot.background = element_rect(color = NA),
    plot.title = element_text(size = base_size * 1.8, hjust = .5,
                              vjust = 1, face = "bold",
                              margin = margin(b = half_line * 1.2)),
    plot.title.position = "panel",
    plot.subtitle = element_text(size = base_size * 1.3,
                                 hjust = .5, vjust = 1,
                                 margin = margin(b = half_line * .9)),
    plot.caption = element_text(size = rel(0.9), hjust = 1, vjust = 1,
                                margin = margin(t = half_line * .9)),
    plot.caption.position = "panel",
    plot.tag = element_text(size = rel(1.2), hjust = .5, vjust = .5),
    plot.tag.position = "topleft",
    plot.margin = margin(rep(base_size, 4)),
    complete = TRUE
  )
}
set_theme(theme_Scherer())
```

Then we can load our data:

```{r, warning = FALSE, message = FALSE}
base_path <- "" # Where is the code repo stored?

# List of crops
crops <- c("mai", "wwh", "ri1", "soy", "aggr")

# Read each .rds file into a named list
crop_data <- lapply(crops, function(crop) {
  readRDS(file.path(base_path, paste0("GGCMI-validation/data/processed/figure_ready_data/extremes_", crop, ".rds")))
})

names(crop_data) <- crops
```

## Figure 2 – aggregated crops

First we filter the data for only the model ensemble median. Then we calculate per location (lat, lon) and extreme event the median error based on the absolute detrended yields. This results in tons/ha unit results.

```{r, warning = FALSE, message = FALSE}
ens_extr <- crop_data[["aggr"]] %>% 
  filter(model == "ensemble") %>% 
  group_by(lat, lon, climate_extreme) %>% 
  summarise(median_error = median(difftrend_obs - difftrend_sim),
           ctr = ctr) %>% 
ungroup()
```

Let's rank the 10 gridcells with highest overestimation errors

```{r, warning = FALSE, message = FALSE}
head(ens_extr[order(-ens_extr$median_error), ], 10) 
```

Then the 10 gridcells with highest underestimation errors

```{r, warning = FALSE, message = FALSE}
head(ens_extr[order(ens_extr$median_error), ], 10) 
```

Next we can create a world map as basis to plot the results on

```{r, warning = FALSE, message = FALSE}
world_geometries <- ne_countries(scale = "medium", returnclass = "sf") %>% 
  mutate(ctr = iso_a3_eh) %>% # eh needed to get France and Norway as well 
  filter(name_long != "	
Ashmore and Cartier Islands", name_long != "Indian Ocean Territories") %>%  # Get rid of duplicate AUS entries
  dplyr::select(ctr,subregion) %>% 
   filter(ctr != "ATA") %>%
 distinct() 

# Create the base map
base_map <- ggplot() +
  geom_sf(data = world_geometries, fill = "gray", color = "black", size = 0.2) +
  theme(
    panel.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),  # Remove major gridlines
    panel.grid.minor = element_blank(),  # Remove minor gridlines
    axis.text = element_blank(),
    axis.ticks = element_blank()
  )

base_map
```

Now we can plot the data on the world map

```{r, warning = FALSE, message = FALSE}
# Create a new column in the data for discrete classes based on median_error
ens_extr$median_error_class <- cut(ens_extr$median_error,
                                       breaks = c(-Inf, -5, -1, 0, 1, Inf),  # Define the class intervals
                                       labels = c("< -5", "-5 to -1", "-1 to 0", "0 to 1", "1 <"),
                                       include.lowest = TRUE)

# Define colors for each class
colors <- c("firebrick", "#DC0000FF", "#E65100", "turquoise", "blue")

map_extremes <- base_map +
  geom_tile(data = ens_extr, aes(x = lon, y = lat, fill = median_error_class), size = 0.2) +
  scale_fill_manual(
    name = "Median Model Error in tons/ha",
    values = setNames(colors, c("< -5", "-5 to -1","-1 to 0", "0 to 1", "1 <")),
    guide = guide_legend(
      direction = "horizontal",  # Arrange legend items in a row
      label.position = "bottom",  # Place labels below the color swatches
      title.position = "top",
      title.vjust = 1,
      title.hjust = 0.5,
      nrow = 1,  # Place all legend items on one line
      keywidth = unit(2, "cm"),  # Adjust key size for better spacing
      keyheight = unit(0.5, "cm")
    )
  ) +
  labs(x = "", y = "") +
  theme(
    legend.position = "bottom",
    legend.title = element_text(size = 17),
    legend.text = element_text(size = 12)
  ) +
  facet_wrap(~climate_extreme)

map_extremes

# Save the figure
ggsave(file.path(base_path, "GGCMI-validation/results/main/fig2_ExtremesPerformanceMap.png"), map_extremes, width = 18, height = 12, dpi = 300)
```

## Supplementary figures 6-9

We can make the same figures per crop

### RICE

```{r, warning = FALSE, message = FALSE}
ens_extr <- crop_data[["ri1"]] %>% 
  filter(model == "ensemble") %>% 
  group_by(lat, lon, climate_extreme) %>% 
  summarise(median_error = median(difftrend_obs - difftrend_sim),
           ctr = ctr) %>% 
ungroup()

# Create a new column in the data for discrete classes based on median_error
ens_extr$median_error_class <- cut(ens_extr$median_error,
                                       breaks = c(-Inf, -5, -1, 0, 1, Inf),  # Define the class intervals
                                       labels = c("< -5", "-5 to -1", "-1 to 0", "0 to 1", "1 <"),
                                       include.lowest = TRUE)

# Define colors for each class
colors <- c("firebrick", "#DC0000FF", "#E65100", "turquoise", "blue")

map_extremes <- base_map +
  geom_tile(data = ens_extr, aes(x = lon, y = lat, fill = median_error_class), size = 0.2) +
  scale_fill_manual(
    name = "Median Model Error in tons/ha",
    values = setNames(colors, c("< -5", "-5 to -1","-1 to 0", "0 to 1", "1 <")),
    guide = guide_legend(
      direction = "horizontal",  # Arrange legend items in a row
      label.position = "bottom",  # Place labels below the color swatches
      title.position = "top",
      title.vjust = 1,
      title.hjust = 0.5,
      nrow = 1,  # Place all legend items on one line
      keywidth = unit(2, "cm"),  # Adjust key size for better spacing
      keyheight = unit(0.5, "cm")
    )
  ) +
  labs(x = "", y = "") +
  theme(
    legend.position = "bottom",
    legend.title = element_text(size = 17),
    legend.text = element_text(size = 12)
  ) +
  facet_wrap(~climate_extreme)

map_extremes

# Save the figure
ggsave(file.path(base_path, "GGCMI-validation/results/appendix/suppfig6_ExtremesPerformanceMap.png"), map_extremes, width = 18, height = 12, dpi = 300)
```

### WINTER WHEAT

```{r, warning = FALSE, message = FALSE}
ens_extr <- crop_data[["wwh"]] %>% 
  filter(model == "ensemble") %>% 
  group_by(lat, lon, climate_extreme) %>% 
  summarise(median_error = median(difftrend_obs - difftrend_sim),
           ctr = ctr) %>% 
ungroup()

# Create a new column in the data for discrete classes based on median_error
ens_extr$median_error_class <- cut(ens_extr$median_error,
                                       breaks = c(-Inf, -5, -1, 0, 1, Inf),  # Define the class intervals
                                       labels = c("< -5", "-5 to -1", "-1 to 0", "0 to 1", "1 <"),
                                       include.lowest = TRUE)

# Define colors for each class
colors <- c("firebrick", "#DC0000FF", "#E65100", "turquoise", "blue")

map_extremes <- base_map +
  geom_tile(data = ens_extr, aes(x = lon, y = lat, fill = median_error_class), size = 0.2) +
  scale_fill_manual(
    name = "Median Model Error in tons/ha",
    values = setNames(colors, c("< -5", "-5 to -1","-1 to 0", "0 to 1", "1 <")),
    guide = guide_legend(
      direction = "horizontal",  # Arrange legend items in a row
      label.position = "bottom",  # Place labels below the color swatches
      title.position = "top",
      title.vjust = 1,
      title.hjust = 0.5,
      nrow = 1,  # Place all legend items on one line
      keywidth = unit(2, "cm"),  # Adjust key size for better spacing
      keyheight = unit(0.5, "cm")
    )
  ) +
  labs(x = "", y = "") +
  theme(
    legend.position = "bottom",
    legend.title = element_text(size = 17),
    legend.text = element_text(size = 12)
  ) +
  facet_wrap(~climate_extreme)

map_extremes

# Save the figure
ggsave(file.path(base_path, "GGCMI-validation/results/appendix/suppfig7_ExtremesPerformanceMap.png"), map_extremes, width = 18, height = 12, dpi = 300)
```

### SOY

```{r, warning = FALSE, message = FALSE}
ens_extr <- crop_data[["soy"]] %>% 
  filter(model == "ensemble") %>% 
  group_by(lat, lon, climate_extreme) %>% 
  summarise(median_error = median(difftrend_obs - difftrend_sim),
           ctr = ctr) %>% 
ungroup()

# Create a new column in the data for discrete classes based on median_error
ens_extr$median_error_class <- cut(ens_extr$median_error,
                                       breaks = c(-Inf, -5, -1, 0, 1, Inf),  # Define the class intervals
                                       labels = c("< -5", "-5 to -1", "-1 to 0", "0 to 1", "1 <"),
                                       include.lowest = TRUE)

# Define colors for each class
colors <- c("firebrick", "#DC0000FF", "#E65100", "turquoise", "blue")

map_extremes <- base_map +
  geom_tile(data = ens_extr, aes(x = lon, y = lat, fill = median_error_class), size = 0.2) +
  scale_fill_manual(
    name = "Median Model Error in tons/ha",
    values = setNames(colors, c("< -5", "-5 to -1","-1 to 0", "0 to 1", "1 <")),
    guide = guide_legend(
      direction = "horizontal",  # Arrange legend items in a row
      label.position = "bottom",  # Place labels below the color swatches
      title.position = "top",
      title.vjust = 1,
      title.hjust = 0.5,
      nrow = 1,  # Place all legend items on one line
      keywidth = unit(2, "cm"),  # Adjust key size for better spacing
      keyheight = unit(0.5, "cm")
    )
  ) +
  labs(x = "", y = "") +
  theme(
    legend.position = "bottom",
    legend.title = element_text(size = 17),
    legend.text = element_text(size = 12)
  ) +
  facet_wrap(~climate_extreme)

map_extremes

# Save the figure
ggsave(file.path(base_path, "GGCMI-validation/results/appendix/suppfig8_ExtremesPerformanceMap.png"), map_extremes, width = 18, height = 12, dpi = 300)
```

### MAIZE

```{r, warning = FALSE, message = FALSE}
ens_extr <- crop_data[["mai"]] %>% 
  filter(model == "ensemble") %>% 
  group_by(lat, lon, climate_extreme) %>% 
  summarise(median_error = median(difftrend_obs - difftrend_sim),
           ctr = ctr) %>% 
ungroup()

# Create a new column in the data for discrete classes based on median_error
ens_extr$median_error_class <- cut(ens_extr$median_error,
                                       breaks = c(-Inf, -5, -1, 0, 1, Inf),  # Define the class intervals
                                       labels = c("< -5", "-5 to -1", "-1 to 0", "0 to 1", "1 <"),
                                       include.lowest = TRUE)

# Define colors for each class
colors <- c("firebrick", "#DC0000FF", "#E65100", "turquoise", "blue")

map_extremes <- base_map +
  geom_tile(data = ens_extr, aes(x = lon, y = lat, fill = median_error_class), size = 0.2) +
  scale_fill_manual(
    name = "Median Model Error in tons/ha",
    values = setNames(colors, c("< -5", "-5 to -1","-1 to 0", "0 to 1", "1 <")),
    guide = guide_legend(
      direction = "horizontal",  # Arrange legend items in a row
      label.position = "bottom",  # Place labels below the color swatches
      title.position = "top",
      title.vjust = 1,
      title.hjust = 0.5,
      nrow = 1,  # Place all legend items on one line
      keywidth = unit(2, "cm"),  # Adjust key size for better spacing
      keyheight = unit(0.5, "cm")
    )
  ) +
  labs(x = "", y = "") +
  theme(
    legend.position = "bottom",
    legend.title = element_text(size = 17),
    legend.text = element_text(size = 12)
  ) +
  facet_wrap(~climate_extreme)

map_extremes

# Save the figure
ggsave(file.path(base_path, "GGCMI-validation/results/appendix/suppfig9_ExtremesPerformanceMap.png"), map_extremes, width = 18, height = 12, dpi = 300)
```
